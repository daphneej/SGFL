generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int      @id @default(autoincrement())
  firstName       String?
  lastName        String?
  email           String   @unique
  password        String
  gender          Gender?
  address         String?
  phone           String?  @unique
  status          Status   @default(ACTIVE)
  role            Role     @default(USER)
  createdCourses  Course[] @relation("TrainerCreatedCourses")
  enrolledCourses Course[] @relation("StudentEnrolledCourses")
  coursesInCart   Course[] @relation("StudentCartCourses")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Course {
  id                       Int          @id @default(autoincrement())
  title                    String
  description              String
  price                    Float
  trainerId                Int?
  categoryId               Int
  thumbnailUrl             String
  videoUrl                 String
  createdAt                DateTime     @default(now())
  published                CourseStatus @default(PENDING)
  trainer                  User?        @relation("TrainerCreatedCourses", fields: [trainerId], references: [id])
  students                 User[]       @relation("StudentEnrolledCourses")
  studentsWithCourseInCart User[]       @relation("StudentCartCourses")
  category                 Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([categoryId])
}

model StudentCartCourses {
  A Int
  B Int

  @@unique([A, B], map: "_StudentCartCourses_AB_unique")
  @@index([B], map: "_StudentCartCourses_B_index")
  @@map("_StudentCartCourses")
}

model StudentEnrolledCourses {
  A Int
  B Int

  @@unique([A, B], map: "_StudentEnrolledCourses_AB_unique")
  @@index([B], map: "_StudentEnrolledCourses_B_index")
  @@map("_StudentEnrolledCourses")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum CourseStatus {
  PENDING
  PUBLISHED
}

enum Role {
  USER
  STUDENT
  TRAINER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}
